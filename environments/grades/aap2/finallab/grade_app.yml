---
- name: Check application
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
##### Result for App Projects #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.project ==  item.name
      loop: "{{ r_projects.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Project"

#### List App Inventory ####
    - name: List Inventory
      uri:
        url: https://{{ ac.url }}/api/v2/inventories/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_inventories

##### Result for App Invetory #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.inventory ==  item.name
      loop: "{{ r_inventories.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Inventory"


#### List App Inventory Sources ####
    - name: List inventory_sources
      uri:
        url: https://{{ ac.url }}/api/v2/inventory_sources/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_inventory_sources

##### Result for App Inventory Sources #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.inventory_source ==  item.name
      loop: "{{ r_inventory_sources.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Inventory Source"


#### List App Static Inventory Groups ####
    - name: List Inventory Groups
      uri:
        url: https://{{ ac.url }}/api/v2/groups/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_groups

##### Result for App Inventory Static group 0 #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.inventory_groups.0.name ==  item.name
      loop: "{{ r_groups.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Inventory Static Group {{ application.inventory_groups.0.name }}"

##### Result for App Inventory Static group 1 #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.inventory_groups.1.name ==  item.name
      loop: "{{ r_groups.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Inventory Static Group {{ application.inventory_groups.1.name }}"

##### Result for App Inventory Static group 2 #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.inventory_groups.2.name ==  item.name
      loop: "{{ r_groups.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Inventory Static Group {{ application.inventory_groups.2.name }}"

#### Result App Children Group 0 #####
    - debug:
        msg: "{{ item.json.results.0.name }}"
      loop: "{{ r_children_groups.results }}"
      when: application.inventory_groups.0.child == item.json.results.0.name

#### Test App Children groups #####
    - set_fact:
        get_inventory_groups: "{{ get_inventory_groups | d([]) + [{ 
            'id': item.1.id,
            'name': item.1.name, 
            'children': item.0.child
            }] }}"
      when: item.0.name == item.1.name
      loop: "{{ application.inventory_groups|product(r_groups.json.results)|list }}"

    - name: List Inventory Groups
      uri:
        url: https://{{ ac.url }}/api/v2/groups/{{ item.id }}/children/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_children_groups
      loop: "{{ get_inventory_groups }}"

##### Result for App Job Template #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: application.job_template ==  item.name
      loop: "{{ r_jobtemplates.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Job Templatet"

#### Checking Application deployment
    - name: Checking Application deployment
      uri:
        url: http://{{ hostvars.frontend.ansible_host  }}/?name=root
        method: GET
        return_content: yes
      register: r_app_uri
      ignore_errors: yes

    - debug: var=r_app_uri
      when:
        - '"root redhat /bin/bash /root" in r_app_uri.content'
        - r_app_uri.status == 200

##### Result for Application deployment #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when:
        - '"root redhat /bin/bash /root" in r_app_uri.content'
        - r_app_uri.status == 200

    - name: "No Success - set fact"
      set_fact:
        success: false
      when:
        - '"root redhat /bin/bash /root" not in r_app_uri.content'
        - r_app_uri.status != 200

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (App)   Application Deployment"
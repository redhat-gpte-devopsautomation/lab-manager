---
- hosts: localhost
  gather_facts: false
  vars:
    guid: "{{ lookup('env','GUID') }}"
    home: "{{ lookup('env','HOME') }}"
    internal_domain: "{{ lookup('env','INTERNAL_DOMAIN') }}"
  tasks:
    - name: List Credentials
      uri:
        url: https://{{ ac.url }}/api/v2/credentials/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_credentials
      ignore_errors: true

##### Result for Container registry #####
    - name: "No Success - set fact"
      set_fact:
        success: false
      
    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.container_cred in item.name
      loop: "{{ r_credentials.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Container Registry Credentials"

##### Result for Cloud Credentials #####
  
    - name: "Success - set fact"
      set_fact:
        success: true | d(false)
      when: infra.cloud_cred in item.name
      loop: "{{ r_credentials.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Cloud Credentials"

##### Result for Machine Credential #####
    - name: "Success - set fact"
      set_fact:
        success: true | d(false)
      when: infra.machine_cred in item.name
      loop: "{{ r_credentials.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Machine Credential"



    - meta: refresh_inventory

    - name: Collection instance info
      os_server_info:
        cloud: "{{ guid }}-project"
      register: instances

    - name: Build In-Memory inventory
      add_host:
        host: "{{ item.name }}"
        group:
          - "{{ item.metadata.AnsibleGroup }}"
          - osp_instances
        ansible_host: "{{ item.private_v4 }}"
        ansible_user: cloud-user
        ansible_ssh_private_key_file: "{{ infra.ssh_key }}"
      when: item.metadata.type | default('') == "osp_instances"
      loop: "{{ instances.openstack_servers }}"

- hosts: frontend
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_frontend
##### Result for frontend #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_frontend.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_frontend.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Node frontend"

- hosts: app1
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_app1
##### Result for  app1 #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_app1.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_app1.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Node app1"

- hosts: app2
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_app2
##### Result for app2 #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_app2.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_app2.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Node app2"

- hosts: appdb
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_appdb
##### Result for appdb #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_appdb.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_appdb.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Node appdb"

- name: Run grader
  hosts: localhost
  gather_facts: false
  become: false
  tasks:
#### Checking Application deployment
    - name: Checking Application deployment
      uri:
        url: http://{{ hostvars.frontend.ansible_host  }}/?name=root
        method: GET
        return_content: yes
      register: r_app_uri
      ignore_errors: yes

    - debug: var=r_app_uri
      when:
        - '"root redhat /bin/bash /root" in r_app_uri.content'
        - r_app_uri.status == 200

##### Result for Application deployment #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when:
        - '"root redhat /bin/bash /root" in r_app_uri.content'
        - r_app_uri.status == 200

    - name: "No Success - set fact"
      set_fact:
        success: false
      when:
        - '"root redhat /bin/bash /root" not in r_app_uri.content'
        - r_app_uri.status != 200

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking Application Deployment"
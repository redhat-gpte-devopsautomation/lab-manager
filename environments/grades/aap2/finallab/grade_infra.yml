---
- hosts: localhost
  gather_facts: false
  vars:
    guid: "{{ lookup('env','GUID') }}"
    home: "{{ lookup('env','HOME') }}"
    internal_domain: "{{ lookup('env','INTERNAL_DOMAIN') }}"
  tasks:
### List Credentials #####
    - name: List Credentials
      uri:
        url: https://{{ ac.url }}/api/v2/credentials/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_credentials
      ignore_errors: true

##### Result for Container registry #####
    - name: "No Success - set fact"
      set_fact:
        success: false
      
    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.container_cred == item.name
      loop: "{{ r_credentials.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) Container Registry Credentials"

##### Result for Cloud Credentials #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.cloud_cred == item.name
      loop: "{{ r_credentials.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) Cloud Credentials"

##### Result for Machine Credential #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.machine_cred == item.name
      loop: "{{ r_credentials.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) Machine Credential"

#### List Execution Environment ####
    - name: List Job templates
      uri:
        url: https://{{ ac.url }}/api/v2/execution_environments/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_ee

##### Result for Execution Environment #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.ee ==  item.name
      loop: "{{ r_ee.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) Execution Environment"


#### List Projects ####
    - name: List Job templates
      uri:
        url: https://{{ ac.url }}/api/v2/projects/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_projects

##### Result for Infra Projects #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.project ==  item.name
      loop: "{{ r_projects.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) Project"

#### List job templates ####
    - name: List Job templates
      uri:
        url: https://{{ ac.url }}/api/v2/job_templates/
        user: "{{ ac.user }}"
        password: "{{ ac.password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: false
        body_format: json
        status_code: 200
      register: r_jobtemplates

##### Result for Infra Job template #####
    - name: "No Success - set fact"
      set_fact:
        success: false

    - name: "Success - set fact"
      set_fact:
        success: true
      when: infra.job_template ==  item.name
      loop: "{{ r_jobtemplates.json.results }}"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) Job Template"

#### In-memory inventory ####
    - meta: refresh_inventory

    - name: Collection instance info
      os_server_info:
        cloud: "{{ guid }}-project"
      register: instances

    - name: Build In-Memory inventory
      add_host:
        host: "{{ item.name }}"
        group:
          - "{{ item.metadata.AnsibleGroup }}"
          - osp_instances
        ansible_host: "{{ item.private_v4 }}"
        ansible_user: cloud-user
        ansible_ssh_private_key_file: "{{ infra.ssh_key }}"
      when: item.metadata.type | default('') == "osp_instances"
      loop: "{{ instances.openstack_servers }}"

- hosts: frontend
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_frontend
##### Result for frontend #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_frontend.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_frontend.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) frontend provisioning"

- hosts: app1
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_app1
##### Result for  app1 #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_app1.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_app1.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra) app1 provisioning"

- hosts: app2
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_app2
##### Result for app2 #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_app2.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_app2.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra)   app2 provisioning"

- hosts: appdb
  gather_facts: false
  tasks:
    - ping:
      register: r_ping_appdb
##### Result for appdb #####
    - name: "Success - set fact"
      set_fact:
        success: true
      when: r_ping_appdb.ping == "pong"

    - name: "No Success - set fact"
      set_fact:
        success: false
      when: r_ping_appdb.ping != "pong"

    - name: Import logging role
      import_role:
        name: manager.grade.logging_grade_to_log
      vars:
        task_description_message: "Checking (Infra)   appdb provisioning"

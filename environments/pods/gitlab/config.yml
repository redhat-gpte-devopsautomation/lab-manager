---
- name: update gitlab records
  hosts: localhost
  become: true
  connection: local
  gather_facts: False
  tasks:
    - name: Include environment variables
      include_tasks: "../../../defaults/tasks/lab-env-vars.yml"

    - name: Include gitlab workload
      include_vars: config_vars.yml

    - name: find current token
      stat:
        path: "/home/devops/.gitlab"
      register: stat_output

    - name: include current gitlab root token
      include_vars: /home/devops/.gitlab
      when: stat_output.status.exist | bool

    # set gitlab root token 
    - name: Set/reset root token
      when: gitlab_root_token | default('') != gitlab_initial_token
      block:
      - name: Set gitlab root token
        become: true
        shell: |
          podman exec -it {{ gitlab_pod_name }} bash -c " 
          gitlab-rails runner \"
          token = User.find_by_username('root').personal_access_tokens.create(scopes: [:api], name: 'Playbook Token')
          token.set_token('{{ gitlab_initial_token }}')
          token.save!
          \""

      - name: Save gitlab root token
        become: true
        lineinfile:
          path: "/home/devops/.gitlab"
          regex: '^gitlab_root_token*'
          line: 'gitlab_root_token: {{ gitlab_initial_token }}'
          state: present

      - name: Include environment variables
        include_tasks: "/home/devops/.gitlab"

    # Create Gitlab user
    - name: get list of gitlab users
      uri:
        url: http://{{ gitlab_host_url }}/api/v4/users/
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_root_token }}"
      register: register_user_list

    - name: create gitlab users
      uri:
        url: http://{{ gitlab_host_url }}/api/v4/users/
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_root_token }}"
        body_format: form-urlencoded
        status_code: 201
        body:
          enable_ssl_verification: false
          name: "{{ gitlab_details.user.name }}"
          username: "{{ gitlab_details.user.name }}"
          password: "{{ gitlab_details.user.password }}"
          email: "{{ gitlab_details.user.email }}"
          admin: "{{ gitlab_details.user.admin | default(omit) }}"
          skip_confirmation: "{{ gitlab_details.user.admin | default(true) }}"
      when: gitlab_details.user.name not in  register_user_list.json| json_query('[*].name')

    # Create gitlab project for the user
    - name: get list of gitlab users
      uri:
        url: http://{{ gitlab_host_url }}/api/v4/users/
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_root_token }}"
      register: register_user_list

    - name: find and set user id
      set_fact:
        gitlab_user_id: "{{ item.id }}"
      when: 'item.name == gitlab_details.user.name'
      loop: "{{ register_user_list.json }}"

    - name: List gitlab  projects
      uri:
        url: http://{{ gitlab_host_url }}/api/v4/users/{{ gitlab_user_id }}/projects
        method: GET
        headers:
          PRIVATE-TOKEN: "{{ gitlab_root_token }}"
      when: gitlab_user_id is defined
      register: register_project_list

    - name: create project
      uri:
        url: "http://{{ gitlab_host_url }}/api/v4/projects/user/{{ gitlab_user_id }}"
        method: POST
        headers:
          PRIVATE-TOKEN: "{{ gitlab_root_token }}"
        body_format: form-urlencoded
        status_code: 201
        body:
          enable_ssl_verification: false
          user_id: "{{ gitlab_user_id }}"
          name: "{{ __project.name }}"
          visibility: "{{ __project.visibility }}"
          import_url: "{{ __project.repository }}"
      when: 
        - "gitlab_user_id is defined"
        - "__project.name not in register_project_list.json | json_query('[*].name') | default('none')"
      loop: "{{ gitlab_details.projects }}"
      loop_control:
        loop_var: __project

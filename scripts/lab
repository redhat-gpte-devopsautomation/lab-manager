#/usr/bin/bash
# Author: 
#   - Mitesh The Mouse, mitsharm@redhat.com
#   - Prakhar Srivastava, psrivast@redhat.com
# Team: Ansible Automation - GPTE
# License: GPLv3
# Version: 2.0


# Main Playbook
#LAB_MGR_DIR=${LAB}
MAIN_PLAYBOOK=${LAB_MGR_DIR}/main.yml
export ANSIBLE_CONFIG=${LAB_MGR_DIR}/ansible.cfg
# CAlls
# deploy,destroy



usage() {
  CMD_NAME=$(basename ${0})
  echo -e  "\e[31m"
  echo -e "Usage-1: $CMD_NAME (deploy|destroy|reconfigure|reset) [ -i instance_name ] [ -p pod_name ]"
  echo -e "Usage-2: $CMD_NAME prep  -c course_name"
  echo -e "\e[0m \n"
  exit 2
}

count_cmd_args() {
  if [ ${#@} -lt 3 ];
    then 
      echo -e  "\e[31mLess arguments were passed \e[0m "
      usage
      exit 2
  fi
}

common_environment_vars="
-e guid=${GUID} \
-e email=${OPENTLC_USER_EMAIL} \
-e subdomain=${SUBDOMAIN} \
-e lab_mgr_dir=${LAB_MGR_DIR} \
-e cloud_provider=${CLOUD_PROVIDER} \
-e internal_domain=${INTERNAL_DOMAIN} \
-e collections_dir='./collections/ansible_collections/'
"

env_exec_deploy() {
  while  getopts "hi:p:" arg; do
    case ${arg} in
      i)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=instances -e env_name=${OPTARG} \
          ${common_environment_vars}
          ;;
      p)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=pods -e env_name=${OPTARG} \
          ${common_environment_vars}
        ;;
      h|*) usage ;;
    esac
  done
}
env_exec_destroy() {
  while  getopts "hi:p:" arg; do
    case ${arg} in
      i)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=instances -e env_destroy=true -e env_name=${OPTARG} \
          ${common_environment_vars}

        ;;
      p)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=pods -e env_destroy=true -e env_name=${OPTARG} \
          ${common_environment_vars}
          ;;
      h|*) usage ;;
    esac
  done
}

env_exec_reconfigure() {
  while  getopts "hi:p:" arg; do
    case ${arg} in
      i)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=instances -e env_name=${OPTARG} -e only_config=true \
          ${common_environment_vars}
        ;;
      p)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=pods -e env_name=${OPTARG} -e only_config=true \
          ${common_environment_vars}
        ;;
      h|*) usage ;;
    esac
  done
}

env_exec_reset() {
  while  getopts "hi:p:" arg; do
    case ${arg} in
      i)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=instances -e env_destroy=true -e env_name=${OPTARG} \
          ${common_environment_vars}

        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=instances -e env_name=${OPTARG} \
          ${common_environment_vars}
        ;;
      p)
        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=pods -e env_destroy=true -e env_name=${OPTARG} \
          ${common_environment_vars}

        ansible-playbook ${MAIN_PLAYBOOK} \
          -e provisioner=pods -e env_name=${OPTARG} \
          ${common_environment_vars}
        ;;
      h|*) usage ;;
    esac
  done
}

course_exec_prep() {
  while  getopts "hc:" arg; do
    case ${arg} in
      c)
        ansible-playbook ${LAB_MGR_DIR}/course_prep.yml \
        -e course_name=${OPTARG} \
        ${common_environment_vars}
        ;;
      h|*) usage
        ;;
    esac
  done
}

case ${1} in
  deploy) 
    count_cmd_args
    env_exec_deploy ${@:2}
    ;;
  destroy) 
    count_cmd_args
    env_exec_destroy ${@:2}
    ;;
  reconfigure)
    count_cmd_args
    env_exec_reconfigure ${@:2}
    ;;
  reset)
    count_cmd_args
    env_exec_reset ${@:2}
    ;;
  prep) 
    count_cmd_args
    course_exec_prep
    ;;

  help|h) usage
    ;;
  *)
    echo -e  "\e[31mInvalid argument\e[0m "
    usage
    ;;
esac





